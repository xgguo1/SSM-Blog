/*
Navicat MySQL Data Transfer

Source Server         : root
Source Server Version : 50505
Source Host           : localhost:3306
Source Database       : db_blog

Target Server Type    : MYSQL
Target Server Version : 50505
File Encoding         : 65001

Date: 2019-06-26 12:26:08
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for `tb_admin`
-- ----------------------------
DROP TABLE IF EXISTS `tb_admin`;
CREATE TABLE `tb_admin` (
  `admin_id` int(11) NOT NULL AUTO_INCREMENT,
  `admin_name` varchar(32) DEFAULT NULL,
  `admin_nick` varchar(32) DEFAULT NULL,
  `admin_count` varchar(32) DEFAULT NULL,
  `admin_pwd` varchar(255) DEFAULT NULL,
  `admin_introduce` varchar(255) DEFAULT NULL,
  `admin_jobs` varchar(32) DEFAULT NULL,
  `admin_email` varchar(64) DEFAULT NULL,
  `admin_qq` int(11) DEFAULT NULL,
  `admin_wechat` varchar(64) DEFAULT NULL,
  `admin_github` varchar(255) DEFAULT NULL,
  `admin_weibo` varchar(64) DEFAULT NULL,
  `image_id` int(11) DEFAULT NULL,
  `admin_status` tinyint(4) DEFAULT '1',
  PRIMARY KEY (`admin_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of tb_admin
-- ----------------------------

-- ----------------------------
-- Table structure for `tb_article`
-- ----------------------------
DROP TABLE IF EXISTS `tb_article`;
CREATE TABLE `tb_article` (
  `article_id` int(11) NOT NULL AUTO_INCREMENT,
  `article_title` varchar(128) DEFAULT NULL,
  `article_summary` varchar(255) DEFAULT NULL,
  `article_content` longtext,
  `article_comment` int(11) DEFAULT '0',
  `article_view` int(11) DEFAULT '0',
  `article_add` datetime DEFAULT '2018-12-01 00:00:00',
  `article_update` datetime DEFAULT NULL,
  `article_love` int(11) DEFAULT '0' COMMENT '收藏',
  `article_like` int(11) DEFAULT NULL COMMENT '点赞',
  `tag_id` int(11) DEFAULT '1' COMMENT '文章标签',
  `user_id` int(11) DEFAULT '1',
  `category_id` int(11) DEFAULT NULL COMMENT '文章分类',
  `article_type` tinyint(4) DEFAULT '1' COMMENT '文章类型、是否原创',
  `code_theme` varchar(100) DEFAULT NULL,
  `verify_status` tinyint(4) DEFAULT '0' COMMENT '0默认、1审核通过、2审核不通过',
  `article_status` tinyint(4) DEFAULT '0' COMMENT '0保存为草稿、1提交发布申请(审核中)',
  PRIMARY KEY (`article_id`),
  KEY `user_id` (`user_id`),
  CONSTRAINT `tb_article_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `tb_user` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=38 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of tb_article
-- ----------------------------
INSERT INTO `tb_article` VALUES ('25', '这是文章标题', '这是文章内容这是更新文章的核心代码块：@ResponseBody\n@RequestMapping(value = \"/updateOrPublishArticle\",method = RequestMethod.POST)\n   public String updateOrPublishArticle(String articleTitle , String codeTheme, String contentText, String summaryText, Article article,St', '<div style=\"text-align:center\"><span style=\"color:#2ecc71\"><span style=\"font-size:26px\"><strong>这是文章内容</strong></span></span></div>\n\n<div><span style=\"color:#e67e22\"><span style=\"font-family:Comic Sans MS,cursive\"><span style=\"font-size:18px\"><strong>这是更新文章的核心代码块：</strong></span></span></span></div>\n\n<div>\n<pre>\n<code class=\"language-java\">@ResponseBody\n@RequestMapping(value = \"/updateOrPublishArticle\",method = RequestMethod.POST)\n   public String updateOrPublishArticle(String articleTitle , String codeTheme, String contentText, String summaryText, Article article,String articleId,String articleStatus){\n        article.setArticleId(Integer.parseInt(articleId));\n        article.setArticleTitle(articleTitle);\n        article.setCodeTheme(codeTheme);\n        article.setArticleContent(contentText);\n        article.setArticleSummary(summaryText);\n        article.setArticleStatus(Integer.parseInt(articleStatus));\n        int res = userService.updateArticle(article);\n        if (res&gt;0){\n            return \"更新成功！\";\n        }\n        return \"0\";\n   }</code></pre>\n<span style=\"font-size:18px\"><del>文章内容又被修改了！<br />\n<img alt=\"\" height=\"48\" src=\"/static/ckeditor/plugins/smiley/emoji/Expression_106.png\" title=\"\" width=\"48\" /></del></span><span style=\"font-family:Verdana,Geneva,sans-serif\"><span style=\"font-size:36px\">保存为草稿</span></span></div>\n', '0', '0', '2018-12-01 00:00:00', null, '0', null, '1', '1', null, '1', 'monokai_sublime', '0', '1');
INSERT INTO `tb_article` VALUES ('27', 'jsp项目使用jstl（c标签）及jstl.jar和standard.jar', '使用jstl很大程​度增加了jsp可读性。第一步，项目必须的两个包jstl.jar和standard.jar，①可以在下载菜鸟教程的：jakarta-taglibs-standard-1.1.2.zip，②也可以在自己电脑的tomcat里找到他们，路径是C:\\Program Files\\Java\\apache-tomcat-8.5.33\\webapps\\examples\\WEB-INF\\lib第二步，在jsp页面的里面加一句话 <%@ taglib uri=\"http://java.sun.co', '<div style=\"text-align:center\"><span style=\"font-size:36px\"><span style=\"color:#c0392b\">使用jstl很大程<img alt=\"\" height=\"56\" src=\"/static/ckeditor/plugins/smiley/emoji/178@2x.gif\" title=\"\" width=\"56\" />度增加了jsp可读性。</span></span></div>\n<br />\n第一步，项目必须的两个包jstl.jar和standard.jar，<br />\n<br />\n①可以在下载菜鸟教程的：jakarta-taglibs-standard-1.1.2.zip，<br />\n<br />\n②也可以在自己电脑的tomcat里找到他们，路径是C:\\Program Files\\Java\\apache-tomcat-8.5.33\\webapps\\examples\\WEB-INF\\lib<br />\n<br />\n第二步，在jsp页面的里面加一句话<br />\n<br />\n&nbsp;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt;<br />\n完成。这样就可以了，在页面写一句jstl语句测试即可：<br />\n<br />\n&nbsp;<br />\n收藏一篇jstl语句讲解博客：JSTL【一】C标签的使用<br />\n标签有如下属性：<br />\n<br />\n属性&nbsp;&nbsp; &nbsp;描述&nbsp;&nbsp; &nbsp;是否必要&nbsp;&nbsp; &nbsp;默认值<br />\nitems&nbsp;&nbsp; &nbsp;要被循环的信息&nbsp;&nbsp; &nbsp;否&nbsp;&nbsp; &nbsp;无<br />\nbegin&nbsp;&nbsp; &nbsp;开始的元素（0=第一个元素，1=第二个元素）&nbsp;&nbsp; &nbsp;否&nbsp;&nbsp; &nbsp;0<br />\nend&nbsp;&nbsp; &nbsp;最后一个元素（0=第一个元素，1=第二个元素）&nbsp;&nbsp; &nbsp;否&nbsp;&nbsp; &nbsp;Last element<br />\nstep&nbsp;&nbsp; &nbsp;每一次迭代的步长&nbsp;&nbsp; &nbsp;否&nbsp;&nbsp; &nbsp;1<br />\nvar&nbsp;&nbsp; &nbsp;代表当前条目的变量名称&nbsp;&nbsp; &nbsp;否&nbsp;&nbsp; &nbsp;无<br />\nvarStatus&nbsp;&nbsp; &nbsp;代表循环状态的变量名称&nbsp;&nbsp; &nbsp;否&nbsp;&nbsp; &nbsp;无<br />\n一般情况下使用items,var即可，varStatus在想获取当前对象下标时使用<br />\n<br />\n后台&nbsp;\n<pre>\n<code class=\"language-java\">    public ModelAndView toaddSmallBoard() {\n        /*需要获取板块信息*/\n        ModelAndView modelAndView=new ModelAndView();\n        List boards=boardService.getBoards();\n        modelAndView.addObject(\"boards\",boards);\n        modelAndView.setViewName(\"admin/addSmallBoard\");\n        return modelAndView;\n    }</code></pre>\n<br />\n前台<br />\n<br />\n我这里使用了select下拉框，具体使用情况示情形定\n<pre>\n<code class=\"language-html\">\n            \n                ${board.boardName}\n            \n</code></pre>\n<br />\n效果<br />\n&nbsp;', '0', '0', '2019-06-23 17:33:05', null, '0', null, '1', '20', null, '1', 'monokai_sublime', '0', '1');
INSERT INTO `tb_article` VALUES ('28', '关于overflow:hidden的作用（溢出隐藏、清除浮动、解决外边距塌陷等等）', '关于overflow:hidden的作用（溢出隐藏、清除浮动、解决外边距塌陷等等）一. overflow:hidden  溢出隐藏给一个元素中设置overflow:hidden，那么该元素的内容若超出了给定的宽度和高度属性，那么超出的部分将会被隐藏，不占位。', '<h1 style=\"text-align:center\"><span style=\"color:#f39c12\">关于overflow:hidden的作用（溢出隐藏、清除浮动、解决外边距塌陷等等）</span></h1>\n\n<h1><strong>一. overflow:hidden&nbsp; 溢出隐藏</strong></h1>\n\n<p>给一个元素中设置overflow:hidden，那么该元素的内容若超出了给定的宽度和高度属性，那么超出的部分将会被隐藏，不占位。</p>\n\n<pre>\n<code class=\"language-css\">/*css样式*/\ndiv{ \n  width: 150px; \n  height: 60px; \n  background: skyblue;\n  overflow: hidden;  /*溢出隐藏*/\n}</code></pre>\n\n<pre>\n<code class=\"language-html\">/*html*/\n&lt;div style=\"\"&gt;\n    今天天气很好！&lt;br&gt;今天天气很好！&lt;br&gt;\n    今天天气很好！&lt;br&gt;今天天气很好！&lt;br&gt;\n&lt;/div&gt;</code></pre>\n&nbsp;\n\n<h1><strong>二. overflow:hidden&nbsp; 清除浮动</strong></h1>\n\n<p>一般而言，父级元素不设置高度时，高度由随内容增加自适应高度。当父级元素内部的子元素全部都设置浮动float之后，子元素会脱离标准流，不占位，父级元素检测不到子元素的高度，父级元素高度为0。那么问题来了，如下：</p>\n如上，由于父级元素没有高度，下面的元素会顶上去，造成页面的塌陷。因此，需要给父级加个overflow:hidden属性，这样父级的高度就随子级容器及子级内容的高度而自适应。如下：<br />\n<br />\n由于在IE比较低版本的浏览器中使用overflow：hidden；是不能达到这样的效果，因此需要加上 zoom:1;<br />\n<br />\n所以为了让兼容性更好的话，如果需要使用overflow:hidden来清除浮动，那么最好加上zoom:1;', '0', '0', '2019-06-23 17:50:00', null, '0', null, '1', '20', null, '1', 'solarized_light', '0', '0');
INSERT INTO `tb_article` VALUES ('30', 'DBUtils BeanListHandler类', 'DBUtils BeanListHandler类org.apache.commons.dbutils.BeanListHandler是ResultSetHandler接口的实现，负责将ResultSet行转换为Java Bean列表。 这个类是线程安全的。类声明以下是org.apache.commons.dbutils.BeanListHandler类的声明 -public class BeanListHandler<T>\n   extends Object implements ResultS', '<div style=\"text-align:center\"><strong><span style=\"color:#e67e22\"><span style=\"font-family:Courier New,Courier,monospace\"><span style=\"font-size:36px\">DBUtils BeanListHandler类</span></span></span></strong></div>\n\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\"><code>org.apache.commons.dbutils.BeanListHandler</code>是<code>ResultSetHandler</code>接口的实现，负责将<code>ResultSet</code>行转换为Java Bean列表。 这个类是线程安全的。</div>\n\n<h2>类声明</h2>\n\n<p>以下是<code>org.apache.commons.dbutils.BeanListHandler</code>类的声明 -</p>\n\n<pre>\n<code>public class BeanListHandler&lt;T&gt;\n   extends Object implements ResultSetHandler&lt;List&lt;T&gt;&gt;\n</code></pre>\nJava\n\n<h2>用法</h2>\n\n<p><strong>第1步</strong> - 创建一个连接对象。<br />\n<strong>第2步</strong> - 将<code>ResultSetHandler</code>实现为<code>BeanListHandler</code>对象。<br />\n<strong>第3步</strong> - 将<code>resultSetHandler</code>传递给<code>QueryRunner</code>对象，并进行数据库操作。</p>\n\n<h2>示例</h2>\n\n<p>以下示例将演示如何使用<code>BeanListHandler</code>类读取记录。 我们将读取<code>Employees</code>表中的一条记录，并将其映射到<code>Employee</code> bean。</p>\n\n<p><strong>语法</strong></p>\n\n<pre>\n<code>List&lt;Employee&gt; empList = queryRunner.query(conn, \"SELECT * FROM employees\", resultHandler);\n</code></pre>\nJava\n\n<p><strong>其中</strong></p>\n\n<ul>\n	<li><code>resultHandler</code> - <code>ResultSetHandler</code>对象将结果集映射到<code>Employee</code>对象。</li>\n	<li><code>queryRunner</code> - <code>QueryRunner</code>对象从数据库中读取<code>Employee</code>对象。</li>\n</ul>\n\n<p>为了理解上述与DBUtils相关的概念，让我们编写一个将运行读取查询的示例。 创建一个示例应用程序。</p>\n\n<p>更新在<a href=\"https://www.yiibai.com/dbutils/dbutils_first_application.html\">DBUtils入门程序</a>中创建的文件:<em>MainApp.java</em> 。<br />\n编译并运行应用程序，如下所述。</p>\n\n<p>以下是<code>Employee.java</code>的内容。</p>\n\n<pre>\n<code class=\"language-java\">public class Employee {\n   private int id;\n   private int age;\n   private String first;\n   private String last;\n   public int getId() {\n      return id;\n   }\n   public void setId(int id) {\n      this.id = id;\n   }\n   public int getAge() {\n      return age;\n   }\n   public void setAge(int age) {\n      this.age = age;\n   }\n   public String getFirst() {\n      return first;\n   }\n   public void setFirst(String first) {\n      this.first = first;\n   }\n   public String getLast() {\n      return last;\n   }\n   public void setLast(String last) {\n      this.last = last;\n   }\n}\n</code></pre>\nJava\n\n<p>以下是<code>MainApp.java</code>文件的内容。</p>\n\n<pre>\n<code class=\"language-java\">import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.List;\n\nimport org.apache.commons.dbutils.DbUtils;\nimport org.apache.commons.dbutils.QueryRunner;\nimport org.apache.commons.dbutils.ResultSetHandler;\nimport org.apache.commons.dbutils.handlers.BeanListHandler;\n\npublic class MainApp {\n   // JDBC driver name and database URL\n   static final String JDBC_DRIVER = \"com.mysql.jdbc.Driver\";  \n   static final String DB_URL = \"jdbc:mysql://localhost:3306/emp\";\n\n   //  Database credentials\n   static final String USER = \"root\";\n   static final String PASS = \"admin\";\n\n   public static void main(String[] args) throws SQLException {\n      Connection conn = null;\n      QueryRunner queryRunner = new QueryRunner();\n\n      //Step 1: Register JDBC driver\n      DbUtils.loadDriver(JDBC_DRIVER);\n\n      //Step 2: Open a connection\n      System.out.println(\"Connecting to database...\");\n      conn = DriverManager.getConnection(DB_URL, USER, PASS);\n\n      //Step 3: Create a ResultSet Handler to handle List of Employee Beans\n      ResultSetHandler&lt;List&lt;Employee&gt;&gt; resultHandler = new BeanListHandler&lt;Employee&gt;(Employee.class);\n\n      try {\n         List&lt;Employee&gt; empList = queryRunner.query(conn, \"SELECT * FROM employees\", resultHandler);\n         for(Employee emp: empList ) {\n\n            //Display values\n            System.out.print(\"ID: \" + emp.getId());\n            System.out.print(\", Age: \" + emp.getAge());\n            System.out.print(\", First: \" + emp.getFirst());\n            System.out.println(\", Last: \" + emp.getLast());\n         }           \n      } finally {\n         DbUtils.close(conn);\n      }        \n   }\n}\n</code></pre>\nJava\n\n<p>完成创建源文件后，让我们运行该应用程序。 如果应用程序一切正常，它将打印下面的消息。</p>\n\n<pre>\n<code class=\"language-apache\">ID: 100, Age: 18, First: Zara, Last: Ali\nID: 101, Age: 25, First: Mahnaz, Last: Fatma\nID: 102, Age: 30, First: Zaid, Last: Khan\nID: 103, Age: 28, First: Sumit, Last: Mittal</code></pre>\n<br />\n<br />\n&nbsp;', '74', '97', '2019-06-23 18:04:01', null, '0', null, '1', '21', null, '1', 'paraiso.light', '0', '1');
INSERT INTO `tb_article` VALUES ('31', 'DBUtils创建查询', 'DBUtils创建查询以下示例将演示如何在DBUtils的帮助下，使用Insert语句来创建记录。 我们将在Employees表中插入一条记录。语法String insertQuery =\"INSERT INTO employees(id,age,first,last)  VALUES (?,?,?,?)\";\nint insertedRecords = queryRunner.update(conn, insertQuery,104,30, \"Sohan\",\"Kumar\");\nJava其中，in', '<div style=\"text-align:center\"><span style=\"color:#1abc9c\"><strong><span style=\"font-size:36px\">DBUtils创建查询</span></strong></span></div>\n\n<div>以下示例将演示如何在DBUtils的帮助下，使用<code>Insert</code>语句来创建记录。 我们将在<code>Employees</code>表中插入一条记录。</div>\n\n<p><strong>语法</strong></p>\n\n<pre>\n<code class=\"language-java\">String insertQuery =\"INSERT INTO employees(id,age,first,last)  VALUES (?,?,?,?)\";\nint insertedRecords = queryRunner.update(conn, insertQuery,104,30, \"Sohan\",\"Kumar\");\n</code></pre>\nJava\n\n<p>其中，</p>\n\n<ul>\n	<li><em>insertQuery</em> &minus; Insert query having placeholders.</li>\n	<li><em>queryRunner</em> &minus; QueryRunner object to insert employee object in database.</li>\n</ul>\n\n<p>为了理解上述与DBUtils相关的概念，我们编写一个将运行插入查询的示例。如下创建一个示例应用程序。</p>\n\n<ul>\n	<li>更新在<a href=\"https://www.yiibai.com/dbutils/dbutils_first_application.html\">DBUtils入门应用</a>中创建的文件<code>MainApp.java</code>。</li>\n	<li>编译并运行应用程序，如下所述。</li>\n</ul>\n\n<p>以下是<code>Employee.java</code>文件的内容。</p>\n\n<pre>\n<code class=\"language-java\">public class Employee {\n   private int id;\n   private int age;\n   private String first;\n   private String last;\n   public int getId() {\n      return id;\n   }\n   public void setId(int id) {\n      this.id = id;\n   }\n   public int getAge() {\n      return age;\n   }\n   public void setAge(int age) {\n      this.age = age;\n   }\n   public String getFirst() {\n      return first;\n   }\n   public void setFirst(String first) {\n      this.first = first;\n   }\n   public String getLast() {\n      return last;\n   }\n   public void setLast(String last) {\n      this.last = last;\n   }\n}\n</code></pre>\nJava\n\n<p>以下是<code>MainApp.java</code>文件的内容。</p>\n\n<pre>\n<code class=\"language-java\">import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\nimport org.apache.commons.dbutils.DbUtils;\nimport org.apache.commons.dbutils.QueryRunner;\n\npublic class MainApp {\n   // JDBC driver name and database URL\n   static final String JDBC_DRIVER = \"com.mysql.jdbc.Driver\";  \n   static final String DB_URL = \"jdbc:mysql://localhost:3306/emp\";\n\n   //  Database credentials\n   static final String USER = \"root\";\n   static final String PASS = \"admin\";\n\n   public static void main(String[] args) throws SQLException {\n      Connection conn = null;\n      QueryRunner queryRunner = new QueryRunner();\n      DbUtils.loadDriver(JDBC_DRIVER);       \n      conn = DriverManager.getConnection(DB_URL, USER, PASS);\n      try {\n         int insertedRecords = queryRunner.update(conn, \n            \"INSERT INTO employees(id,age,first,last)  VALUES (?,?,?,?)\",\n            104,30, \"Sohan\",\"Kumar\");           \n         System.out.println(insertedRecords + \" record(s) inserted\");\n      } finally {\n         DbUtils.close(conn);\n      }  \n   }\n}\n</code></pre>\nJava\n\n<p>完成创建源文件后，运行该应用程序。 如果应用程序一切正常，它将打印下面的消息。</p>\n\n<pre>\n<code>1 record(s) inserted.</code></pre>\n<br />\n原文出自【易百教程】，商业转载请联系作者获得授权，非商业转载请保留原文链接：https://www.yiibai.com/dbutils/dbutils_create_query.html<br />\n<br />\n&nbsp;', '33', '68', '2019-06-23 18:06:16', null, '0', null, '1', '20', null, '1', 'monokai_sublime', '0', '0');
INSERT INTO `tb_article` VALUES ('32', 'DBUtils更新查询', 'DBUtils更新查询--作者：黎柱雄--以下示例将演示如何使用Update查询，在DBUtils的帮助下更新记录。 我们将更新Employees表中的记录。语法String updateQuery = \"UPDATE employees SET age=? WHERE id=?\";\nint updatedRecords = queryRunner.update(conn, updateQuery, 33,104);\n Java其中，updateQuery − 更新包含占位符的查询。queryRunne', '<div style=\"text-align:center\"><span style=\"color:#f39c12\"><strong><span style=\"font-family:Times New Roman,Times,serif\"><span style=\"font-size:36px\">DBUtils更新查询</span></span></strong></span></div>\n作者：黎柱雄<br />\n&nbsp;\n<p>以下示例将演示如何使用Update查询，在DBUtils的帮助下更新记录。 我们将更新<code>Employees</code>表中的记录。</p>\n\n<p><strong>语法</strong></p>\n\n<pre>\n<code class=\"language-sql\">String updateQuery = \"UPDATE employees SET age=? WHERE id=?\";\nint updatedRecords = queryRunner.update(conn, updateQuery, 33,104);\n</code></pre>\nJava\n\n<p>其中，</p>\n\n<ul>\n	<li><em>updateQuery</em> &minus; 更新包含占位符的查询。</li>\n	<li><em>queryRunner</em> &minus; QueryRunner对象更新数据库中的员工对象。</li>\n</ul>\n\n<p>为了理解上述与DBUtils相关的概念，我们编写一个将运行更新查询的示例。创建一个示例应用程序。</p>\n\n<ul>\n	<li>更新在<a href=\"https://www.yiibai.com/dbutils/dbutils_first_application.html\">DBUtils入门应用</a>中创建的文件<code>MainApp.java</code>。</li>\n	<li>编译并运行应用程序，如下所述。</li>\n</ul>\n\n<p>以下是<code>Employee.java</code>文件的内容。</p>\n\n<pre>\n<code class=\"language-java\">public class Employee {\n   private int id;\n   private int age;\n   private String first;\n   private String last;\n   public int getId() {\n      return id;\n   }\n   public void setId(int id) {\n      this.id = id;\n   }\n   public int getAge() {\n      return age;\n   }\n   public void setAge(int age) {\n      this.age = age;\n   }\n   public String getFirst() {\n      return first;\n   }\n   public void setFirst(String first) {\n      this.first = first;\n   }\n   public String getLast() {\n      return last;\n   }\n   public void setLast(String last) {\n      this.last = last;\n   }\n}\n</code></pre>\nJava\n\n<p>以下是<code>MainApp.java</code>文件的内容。</p>\n\n<pre>\n<code class=\"language-java\">import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\nimport org.apache.commons.dbutils.DbUtils;\nimport org.apache.commons.dbutils.QueryRunner;\n\npublic class MainApp {\n   // JDBC driver name and database URL\n   static final String JDBC_DRIVER = \"com.mysql.jdbc.Driver\";  \n   static final String DB_URL = \"jdbc:mysql://localhost:3306/emp\";\n\n   //  Database credentials\n   static final String USER = \"root\";\n   static final String PASS = \"admin\";\n\n   public static void main(String[] args) throws SQLException {\n      Connection conn = null;\n      QueryRunner queryRunner = new QueryRunner();\n\n      DbUtils.loadDriver(JDBC_DRIVER);       \n      conn = DriverManager.getConnection(DB_URL, USER, PASS);\n      try {\n         int updatedRecords = queryRunner.update(conn, \n            \"UPDATE employees SET age=? WHERE id=?\", 33,104);         \n         System.out.println(updatedRecords + \" record(s) updated.\");\n      } finally {\n         DbUtils.close(conn);\n      }        \n   }\n}\n</code></pre>\nJava\n\n<p>完成创建源文件后，运行该应用程序。 如果应用程序一切正常，它将打印下面的消息。</p>\n\n<pre>\n<code class=\"language-sql\">1 record(s) updated.\n</code></pre>\n', '2', '52', '2019-06-23 18:10:04', null, '0', null, '1', '20', null, '1', 'atelier-forest.light', '0', '1');
INSERT INTO `tb_article` VALUES ('33', 'Spring是如何注解的', 'Spring是如何注解的​我教Java课程时强调的一点是注解是惰性的。换句话说，它们只是标记，可能具有某些属性，但没有自己的行为。因此，每当你在一段Java代码上看到一个注解时，就意味着必须有一些其他的Java代码来寻找那个注解并包含真正的智能来做一些有用的东西。不幸的是，这种推理的问题在于，确切地确定哪一段代码正在处理注解是非常困难的，特别是如果它在库中。处理注解的代码可能会令人困惑，因为它使用反射并且必须以非常抽象的方式编写。所以我认为值得看看一个做得很好的例子来看看它是如何运行的。我们详细', '<h1 style=\"text-align:center\"><span style=\"font-family:Comic Sans MS,cursive\"><span style=\"color:#e74c3c\"><span style=\"font-size:36px\">Spring是如何注解的</span></span></span></h1>\n<br />\n<img alt=\"\" height=\"56\" src=\"/static/ckeditor/plugins/smiley/emoji/13@2x.gif\" title=\"\" width=\"56\" />\n<p>我教Java课程时强调的一点是注解是惰性的。换句话说，它们只是标记，可能具有某些属性，但没有自己的行为。因此，每当你在一段Java代码上看到一个注解时，就意味着必须有一些其他的Java代码来寻找那个注解并包含真正的智能来做一些有用的东西。</p>\n\n<p>不幸的是，这种推理的问题在于，确切地确定哪一段代码正在处理注解是非常困难的，特别是如果它在库中。处理注解的代码可能会令人困惑，因为它使用反射并且必须以非常抽象的方式编写。所以我认为值得看看一个做得很好的例子来看看它是如何运行的。</p>\n\n<p>我们详细研究一下 Spring 框架中的 InitDestroyAnnotationBeanPostProcessor 类是如何工作的。选择这个，因为它相对简单，只做了一些相对容易解释的事情, 碰巧和我手头的工作相关。</p>\n\n<p>Spring Bean 的后处理<br />\n首先，我想首先解释一下 Spring 的用途。Spring 框架所做的一件事就是&ldquo;依赖注入&rdquo;。这改变了我们以往用代码将模块串在一起的方式。例如，假设我们编写了一些需要连接数据库的应用程序逻辑, 但并想将提供该连接的特定硬类编码到应用程序逻辑中，我们可以在构造函数或setter方法中将其表示为依赖项：</p>\n\n<p>class MyApplication {<br />\nprivate DataConnection data;<br />\n&hellip;<br />\npublic void setData(DataConnection data) {<br />\nthis.data = data;<br />\n}<br />\n&hellip;<br />\n}<br />\n当然，如果想的话, 我们可以自己编写一个简单的库完成这种依赖注入，从而避免添加对 Spring 的依赖项。但是如果我们在编写一个复杂的应用程序, 想将各模块连接在一起，那么Spring可以非常方便。</p>\n\n<p>既然没有什么神秘的，如果我们要让 Spring 为我们注入这些依赖，那么就会有一个权衡。Spring 需要&ldquo;知道&rdquo;依赖关系以及应用程序中的类和对象。Spring 处理这个问题的方法多是由 Spring 框架对对象进行实例化; 从而可以在称为&quot;应用程序上下文&quot;的大数据结构中跟踪管理这此对象。</p>\n\n<p>后处理和初始化<br />\n而且这里是 InitDestroyBeanPostProcessor 进入的地方 。如果 Spring 要处理实例化，那么在对象实例化完成之后，但是在应用程序开始真正的运行之前，需要进行一些&ldquo;额外工作&rdquo;。需要做的一件&ldquo;额外工作&rdquo;就是调用对象来告诉他们什么时候完全设置好，这样他们就可以进行任何需要的额外初始化。如果我们使用&ldquo;setter&rdquo;注入，如上所述，便通过调用setXxx() 方法注入依赖项，这一点尤其重要，因为在调用对象的构造函数时这些依赖项并不可用。所以 Spring 需要允许用户指定在初始化对象后才应该调用的某个方法的名称。</p>\n\n<p>Spring 一直支持使用XML配置文件来定义由 Spring 来实例化的对象，在这种情况下，有一个 &lsquo;init-method&rsquo; 属性可以用来指定初始化的方法。显然，在这种情况下，它仍然需要反射来实际查找并调用该方法。自Java 5起, 增加了注解，所以Spring 也支持带注解的标记方法，将它们标识为Spring应该实例化的对象，识别需要注入的依赖项，以及识别应该调用的初始化和销毁​​方法。</p>\n\n<p>最后一项 InitDestroyBeanPostProcessor 由其子类或其中一个子类处理。后处理器是一种特殊的对象，由Spring实例化，实现后处理器接口。因为它实现了这个接口，所以Spring会在每个Spring实例化的对象上调用一个方法，允许它修改甚至替换该对象。这是Spring采用模块化架构方法的一部分，可以更轻松地扩展功能。</p>\n\n<p>这是怎么运作的?<br />\n事实上， JSR-250 确定了一些&ldquo;常见&rdquo;注解，包括 @PostConstruct, 用于标记初始化方法,@PreDestroy 注解, 用于注解销毁方法的。不同的是，InitDestroyBeanPostProcessor 被设计成可以处理任何注解集，因此它提供了识别注解的方法：<br />\n&nbsp;</p>\n\n<p>事实上， JSR-250 确定了一些&ldquo;常见&rdquo;注解，包括 @PostConstruct, 用于标记初始化方法,@PreDestroy 注解, 用于注解销毁方法的。不同的是，InitDestroyBeanPostProcessor 被设计成可以处理任何注解集，因此它提供了识别注解的方法：</p>\n\n<pre>\n<code class=\"language-java\">public void setInitAnnotationType(Class&lt;? extends Annotation&gt; initAnnotationType) {\n    this.initAnnotationType = initAnnotationType;\n}\n</code></pre>\n\n<ul>\n	<li>1</li>\n	<li>2</li>\n	<li>3</li>\n</ul>\n\n<p>&hellip;<br />\npublic void setDestroyAnnotationType(Class&lt;? extends Annotation&gt; destroyAnnotationType) {<br />\nthis.destroyAnnotationType = destroyAnnotationType;<br />\n}<br />\n请注意，这些是普通的 setter 方法，因此这个对象本身可以使用 Spring 进行设置。就我而言，我使用Spring 的 StaticApplicationContext，见我以前的文章。</p>\n\n<p>一旦 Spring 实例化了各种对象并注入了所有依赖项，它就会在所有后处理器上为每个对象调用 postProcessBeforeInitialization 方法 。这使后处理器有机会在初始化之前修改或替换对象。因为已经注入了依赖项，所以这是 InitDestroyAnnotationBeanPostProcessor 调用初始化方法的地方。</p>\n\n<pre>\n<code class=\"language-java\">LifecycleMetadata metadata = findLifecycleMetadata(bean.getClass());\ntry {\n    metadata.invokeInitMethods(bean, beanName);\n}\n</code></pre>\n\n<ul>\n	<li>1</li>\n	<li>2</li>\n	<li>3</li>\n	<li>4</li>\n</ul>\n\n<p>由于我们对代码如何处理注解感兴趣，我们感兴趣 findLifecycleMetadata() 方法，因为这是对类进行检查的地方。该方法检查缓存，该缓存用于避免执行超过必要的反射，因为它可能很昂贵。如果尚未检查该类，则调用 buildLifecycleMetadata() 方法。该方法的内容如下：</p>\n\n<p>ReflectionUtils.doWithLocalMethods(targetClass, new ReflectionUtils.MethodCallback() {<br />\n@Override<br />\npublic void doWith(Method method) throws IllegalArgumentException, IllegalAccessException {<br />\nif (initAnnotationType != null) {<br />\nif (method.getAnnotation(initAnnotationType) != null) {<br />\nLifecycleElement element = new LifecycleElement(method);<br />\ncurrInitMethods.add(element);<br />\n}<br />\n}<br />\n&hellip;<br />\n}<br />\n});<br />\n这里 ReflectionUtils 是一个方便的类，简化了反射的使用。除此之外，它还将经过反射的众多已检查异常转换为未经检查的异常(?)，从而使事情变得更容易。此特定方法仅迭代本地方法（即不是继承的方法），并为每个方法调用回调。</p>\n\n<p>完成所有设置之后，检查注解的部分非常无聊; 它只是调用Java反射方法来检查注解，如果找到它，则将该方法存储为初始化方法。</p>\n\n<p>总结<br />\n事实上，这里最终发生的事情很简单，这就是我在教反射时所要做的事情。调试使用注解来控制行为的代码可能具有挑战性，因为从外部来看它非常不透明，所以很难想象发生了什么（或者没有发生）和什么时候发生。但最终，正在发生的事情只是Java代码; 它可能不会立即显现出代码的位置，但它就在那里。</p>\n', '20', '121', '2019-06-23 18:14:29', null, '0', null, '1', '20', null, '1', 'paraiso.light', '0', '0');
INSERT INTO `tb_article` VALUES ('36', '发来大家撒赖打开尽量客观', 'body,\nul,\nol,\nli,\np,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nform,\nfieldset,\ntable,\ntd,\nimg,\ndiv {\n    margin: 0;\n    padding: 0;\n    border: 0;\n}\n\nbody {\n    background: #fff;\n    color: #333;\n    font-size: 12px;\n    margin-top: 5px;\n    font-family: \"SimSun\", \"宋体', '<pre>\n<code class=\"language-css\">body,\nul,\nol,\nli,\np,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nform,\nfieldset,\ntable,\ntd,\nimg,\ndiv {\n    margin: 0;\n    padding: 0;\n    border: 0;\n}\n\nbody {\n    background: #fff;\n    color: #333;\n    font-size: 12px;\n    margin-top: 5px;\n    font-family: \"SimSun\", \"宋体\", \"Arial Narrow\";\n}\n\nul,\nol {\n    list-style-type: none;\n}\n\nselect,\ninput,\nimg,\nselect {\n    vertical-align: middle;\n}\n\na {\n    text-decoration: none;\n}\n\na:link {\n    color: #009;\n}\n\na:visited {\n    color: #800080;\n}\n\na:hover,\na:active,\na:focus {\n    color: #c00;\n    text-decoration: underline;\n}\n/*头部样式*/\n.bran_container {\n    width: 100%;\n    /*height: 145px;*/\n    /*border: 1px solid;*/\n}\n\n.brand_title {\n    width: 100%;\n}\n\n.login_btn {\n    width: 81px;\n    background-color: #F3969A;\n    border-color: #F3969A;\n}\n\n.brand_title span {\n    margin: auto;\n}\n\n.bg-dark {\n    box-shadow: 4px 6px 6px #f15a61;\n    border-radius: 10px;\n}\n\n.navbar-expand-lg .navbar-nav {\n    width: 80%;\n    margin: auto;\n    font-size: 20px;\n}\n\n.content_container {\n    margin-top: 25px;\n    width: 100%;\n    /*height: 950px;*/\n    background-color: #EEEEEE;\n}\n\n/*中间容器*/\n.content_container {\n    margin-top: 25px;\n    width: 100%;\n    /*height: 950px;*/\n    /*background-color: #EEEEEE;*/\n    background-color: #dddbdb;\n}\n/*底部*/\n\n.footer_container {\n    width: 100%;\n    height: 250px;\n    background: #343a40;\n    border: 1px solid;\n}</code></pre>\n', '0', '0', '2019-06-26 10:46:38', null, '0', null, '1', '20', null, '1', 'atelier-heath.dark', '0', '1');

-- ----------------------------
-- Table structure for `tb_image`
-- ----------------------------
DROP TABLE IF EXISTS `tb_image`;
CREATE TABLE `tb_image` (
  `image_id` int(11) NOT NULL AUTO_INCREMENT,
  `image_description` varchar(255) DEFAULT NULL,
  `image_uri` varchar(255) DEFAULT NULL,
  `ads_id` int(11) DEFAULT NULL,
  `article_id` int(11) DEFAULT NULL,
  `image_status` tinyint(4) DEFAULT '1',
  PRIMARY KEY (`image_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of tb_image
-- ----------------------------

-- ----------------------------
-- Table structure for `tb_user`
-- ----------------------------
DROP TABLE IF EXISTS `tb_user`;
CREATE TABLE `tb_user` (
  `user_id` int(11) NOT NULL AUTO_INCREMENT,
  `user_email` varchar(40) DEFAULT NULL,
  `user_nick` varchar(20) DEFAULT NULL,
  `user_pwd` varchar(255) DEFAULT NULL,
  `user_phone` varchar(11) DEFAULT NULL,
  `user_scope` tinyint(4) DEFAULT '16',
  `user_ip` varchar(20) DEFAULT NULL,
  `user_login_date` datetime DEFAULT NULL,
  `image_id` int(11) DEFAULT NULL,
  `user_status` tinyint(4) DEFAULT NULL,
  PRIMARY KEY (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of tb_user
-- ----------------------------
INSERT INTO `tb_user` VALUES ('1', '123@qq.com', 'xgguo', 'xgguo123', '15692437733', '16', '172.16.109.44', '2019-06-21 00:00:00', '1', '1');
INSERT INTO `tb_user` VALUES ('20', 'xgguo@qq.com', 'xgguo', 'xgguo', null, '16', '0:0:0:0:0:0:0:1', '2019-06-22 15:38:44', null, null);
INSERT INTO `tb_user` VALUES ('21', 'lzx@qq.com', 'lzx', '123456', null, '16', '0:0:0:0:0:0:0:1', '2019-06-24 18:59:15', null, null);
INSERT INTO `tb_user` VALUES ('23', 'admin@qq.com', 'admin', 'admin', null, '16', '127.0.0.1', '2019-06-26 10:49:39', null, null);
